# main.py
from fastapi import FastAPI, Query
from fastapi.middleware.cors import CORSMiddleware
import json
import re

app = FastAPI()

# Enable CORS for any origin
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# (These are illustrative function definitions â€” the app only returns the function name + args)
def get_ticket_status(ticket_id: int):
    return f"Status of ticket {ticket_id}"

def schedule_meeting(date: str, time: str, meeting_room: str):
    return f"Meeting scheduled on {date} at {time} in {meeting_room}"

def get_expense_balance(employee_id: int):
    return f"Expense balance for employee {employee_id}"

def calculate_performance_bonus(employee_id: int, current_year: int):
    return f"Performance bonus for employee {employee_id} for {current_year}"

def report_office_issue(issue_code: int, department: str):
    return f"Issue {issue_code} reported for {department}"


@app.get("/execute")
def execute(q: str = Query(...)):
    q_original = q
    q = q.strip()

    # 1) Ticket status: "What is the status of ticket 83742?"
    ticket_match = re.search(r"\bticket\s+(\d+)\b", q, re.IGNORECASE)
    if ticket_match:
        ticket_id = int(ticket_match.group(1))
        return {
            "name": "get_ticket_status",
            "arguments": json.dumps({"ticket_id": ticket_id})
        }

    # 2) Meeting scheduling:
    # Example: "Schedule a meeting on 2025-02-15 at 14:00 in Room A."
    meeting_match = re.search(
        r"on\s+(\d{4}-\d{2}-\d{2})\s+at\s+(\d{2}:\d{2})\s+in\s+(.+?)(?:[.?!]|$)",
        q,
        re.IGNORECASE
    )
    if meeting_match:
        date, time, room = meeting_match.groups()
        room = room.strip()
        return {
            "name": "schedule_meeting",
            "arguments": json.dumps({
                "date": date,
                "time": time,
                "meeting_room": room
            })
        }

    # 3) Expense balance:
    # Accept either "Show my expense balance for employee 10056."
    # or "Employee 10056: what's my expense balance?"
    expense_match = re.search(
        r"(?:expense balance.*employee\s+(\d+)|employee\s+(\d+).*expense balance)",
        q,
        re.IGNORECASE
    )
    if expense_match:
        emp1, emp2 = expense_match.groups()
        employee_id = int(emp1 or emp2)
        return {
            "name": "get_expense_balance",
            "arguments": json.dumps({"employee_id": employee_id})
        }

    # 4) Performance bonus:
    # Example: "Calculate performance bonus for employee 10056 for 2025."
    bonus_match = re.search(
        r"performance\s+bonus\s+for\s+employee\s+(\d+)\s+for\s+(\d{4})",
        q,
        re.IGNORECASE
    )
    if bonus_match:
        employee_id, year = bonus_match.groups()
        return {
            "name": "calculate_performance_bonus",
            "arguments": json.dumps({
                "employee_id": int(employee_id),
                "current_year": int(year)
            })
        }

    # 5) Office issue reporting:
    # Example: "Report office issue 45321 for the Facilities department."
    # Try pattern: "issue <num> for the <Department> department"
    issue_match = re.search(
        r"issue\s+(\d+).*?for\s+(?:the\s+)?([\w\s&\-]+?)\s+department\b",
        q,
        re.IGNORECASE
    )
    if issue_match:
        issue_code, department = issue_match.groups()
        department = department.strip()
        return {
            "name": "report_office_issue",
            "arguments": json.dumps({
                "issue_code": int(issue_code),
                "department": department
            })
        }

    # fallback: try "issue <num> ... department <Dept>"
    issue_match2 = re.search(
        r"issue\s+(\d+).*?department\s+([\w\s&\-]+)",
        q,
        re.IGNORECASE
    )
    if issue_match2:
        issue_code, department = issue_match2.groups()
        department = department.strip()
        return {
            "name": "report_office_issue",
            "arguments": json.dumps({
                "issue_code": int(issue_code),
                "department": department
            })
        }

    # No match
    return {"error": "Query did not match any known function", "input": q_original}
